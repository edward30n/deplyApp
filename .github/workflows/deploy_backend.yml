name: Deploy Backend (ACR â†’ App Service)

on:
  push:
    branches: [ main ]
    paths:
      - "backend/**"
      - ".github/workflows/deploy_backend.yml"
      - "backend/Dockerfile.azure"
  workflow_dispatch:

env:
  RG: recway-rg
  WEBAPP: recway-backend-central
  ACR: recwayacr2
  IMAGE_NAME: recway-backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Compute Tag
        id: vars
        run: |
          if [ -n "${{ github.event.inputs.tag }}" ]; then TAG=${{ github.event.inputs.tag }}; else TAG=${GITHUB_SHA::7}; fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: ACR Login
        run: az acr login -n ${{ env.ACR_NAME }}

      - name: Build Image (backend/Dockerfile.azure)
        run: |
          docker build -f backend/Dockerfile.azure -t ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.tag }} ./backend

      - name: Push Image
        run: |
          docker push ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.tag }}

      - name: Configure Web App container
        run: |
          az webapp config container set \
            -g ${{ env.RESOURCE_GROUP }} \
            -n ${{ env.WEBAPP_NAME }} \
            --docker-custom-image-name ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.tag }} \
            --docker-registry-server-url https://${{ env.ACR_LOGIN_SERVER }}

      - name: Configure App Settings (non-secrets)
        run: |
          az webapp config appsettings set -g ${{ env.RESOURCE_GROUP }} -n ${{ env.WEBAPP_NAME }} --settings \
            WEBSITES_PORT=8000 \
            ENV=azure \
            ENABLE_FILE_WATCHER=false \
            API_V1_STR=/api/v1 \
            FRONTEND_URL=${{ secrets.APPSETTING_FRONTEND_URL }} \
            CORS_ORIGINS='["'${{ secrets.APPSETTING_FRONTEND_URL }}'"]'

      - name: Configure App Settings (Key Vault references)
        run: |
          az webapp config appsettings set -g ${{ env.RESOURCE_GROUP }} -n ${{ env.WEBAPP_NAME }} --settings \
            SECRET_KEY=${{ secrets.APPSETTING_SECRET_KEY_URI }} \
            DATABASE_URI=${{ secrets.APPSETTING_DATABASE_URI_URI }} \
            AZURE_STORAGE_CONNECTION_STRING=${{ secrets.APPSETTING_STORAGE_CONN_URI }}

      - name: Restart Web App
        run: az webapp restart -g ${{ env.RESOURCE_GROUP }} -n ${{ env.WEBAPP_NAME }}

  migrate-db:
    if: ${{ github.event.inputs.run_migrations == 'true' }}
    needs: build-and-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install psycopg2
        run: pip install psycopg2-binary
      - name: DB Connectivity Check
        env:
          DATABASE_URI: ${{ secrets.DATABASE_URI_RAW }}
        run: |
          python - << 'PY'
          import os, psycopg2
          dsn = os.environ['DATABASE_URI']
          conn = psycopg2.connect(dsn)
          cur = conn.cursor()
          cur.execute('SELECT 1')
          print('DB OK:', cur.fetchone())
          cur.close(); conn.close()
          PY

